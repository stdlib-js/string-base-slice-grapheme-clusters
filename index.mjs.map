{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nextGraphemeClusterBreak from '@stdlib/string-next-grapheme-cluster-break';\nimport numGraphemeClusters from '@stdlib/string-num-grapheme-clusters';\nimport max from '@stdlib/math-base-special-fast-max';\n\n\n// MAIN //\n\n/**\n* Slices a string based on grapheme cluster (i.e., user-perceived character) indices.\n*\n* @param {string} str - input string\n* @param {integer} start - the `ith` grapheme cluster to start a slice (inclusive)\n* @param {integer} end - the `jth` grapheme cluster to end a slice (exclusive)\n* @returns {string} output string\n*\n* @example\n* var out = sliceGraphemeClusters( 'Hello World', 0, 5 );\n* // returns 'Hello'\n*\n* out = sliceGraphemeClusters( 'üëãüëãüëã', 0, 2 );\n* // returns 'üëãüëã'\n*\n* out = sliceGraphemeClusters( '‡§Ö‡§®‡•Å‡§ö‡•ç‡§õ‡•á‡§¶', 1, 3 );\n* // returns '‡§®‡•Å‡§ö‡•ç'\n*\n* out = sliceGraphemeClusters( 'Hello World', -5, -1 );\n* // returns 'Worl'\n*/\nfunction sliceGraphemeClusters( str, start, end ) {\n\tvar numClusters;\n\tvar result;\n\tvar idx;\n\tvar brk;\n\tvar i;\n\n\tif ( str === '' ) {\n\t\treturn '';\n\t}\n\tnumClusters = numGraphemeClusters( str );\n\tif ( start < 0 ) {\n\t\tstart = max( start + numClusters, 0 );\n\t}\n\tif ( end < 0 ) {\n\t\tend = max( end + numClusters, 0 );\n\t}\n\tif ( start >= numClusters || start >= end ) {\n\t\treturn '';\n\t}\n\tif ( end > numClusters ) {\n\t\tend = numClusters;\n\t}\n\tresult = '';\n\tidx = 0;\n\ti = 0;\n\twhile ( idx < str.length ) {\n\t\tbrk = nextGraphemeClusterBreak( str, idx );\n\t\tif ( brk === -1 ) {\n\t\t\tbrk = str.length;\n\t\t}\n\t\tif ( i >= start && i < end ) {\n\t\t\tresult += str.substring( idx, brk );\n\t\t}\n\t\tidx = brk;\n\t\ti += 1;\n\t\tif ( i >= end ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default sliceGraphemeClusters;\n"],"names":["sliceGraphemeClusters","str","start","end","numClusters","result","idx","brk","i","numGraphemeClusters","max","length","nextGraphemeClusterBreak","substring"],"mappings":";;yTAkDA,SAASA,EAAuBC,EAAKC,EAAOC,GAC3C,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAa,KAARP,EACJ,MAAO,GASR,GAPAG,EAAcK,EAAqBR,GAC9BC,EAAQ,IACZA,EAAQQ,EAAKR,EAAQE,EAAa,IAE9BD,EAAM,IACVA,EAAMO,EAAKP,EAAMC,EAAa,IAE1BF,GAASE,GAAeF,GAASC,EACrC,MAAO,GAQR,IANKA,EAAMC,IACVD,EAAMC,GAEPC,EAAS,GACTC,EAAM,EACNE,EAAI,EACIF,EAAML,EAAIU,UAEH,KADdJ,EAAMK,EAA0BX,EAAKK,MAEpCC,EAAMN,EAAIU,QAENH,GAAKN,GAASM,EAAIL,IACtBE,GAAUJ,EAAIY,UAAWP,EAAKC,IAE/BD,EAAMC,KACNC,GAAK,IACKL,MAIX,OAAOE,CACR"}